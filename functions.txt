Worker Token
Generates a compatible token to connect to the TaskRouter Worker Flow

exports.handler = function(context, event, callback) {

  let response = new Twilio.Response();

  // Add CORS Headers
  let headers = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "GET",
    "Content-Type": "application/json"
  };

  // Set headers in response
  response.setHeaders(headers);

  response.setStatusCode(200);
  
const TaskRouter = require('twilio').jwt.taskrouter;
const Util = TaskRouter.util;
const TaskRouterCapability = TaskRouter.TaskRouterCapability;
const Policy = TaskRouterCapability.Policy;
const TASKROUTER_BASE_URL = 'https://taskrouter.twilio.com';
const version = 'v1';


const capability = new TaskRouterCapability({
    accountSid: context.ACCOUNT_SID,
    authToken: context.AUTH_TOKEN,
    workspaceSid: context.WORKSPACE_SID,
    channelId: context.WORKER_SID});

  // Helper function to create Policy
  function buildWorkspacePolicy(options) {
    options = options || {};
    var resources = options.resources || [];
    var urlComponents = [TASKROUTER_BASE_URL, version, 'Workspaces', context.WORKSPACE_SID]

    return new Policy({
      url: urlComponents.concat(resources).join('/'),
      method: options.method || 'GET',
      allow: true
    });
  }

  // Event Bridge Policies
  var eventBridgePolicies = Util.defaultEventBridgePolicies(context.ACCOUNT_SID, context.WORKER_SID);

  var workspacePolicies = [
    // Workspace fetch Policy
    buildWorkspacePolicy(),
    // Workspace subresources fetch Policy
    buildWorkspacePolicy({ resources: ['**'] }),
    buildWorkspacePolicy({ resources: ['**'],  method: 'POST' }),

    // Workspace Activities Update Policy
    buildWorkspacePolicy({ resources: ['Activities'], method: 'POST' }),
    // Workspace Activities Worker Reserations Policy
    buildWorkspacePolicy({ resources: ['Workers', context.WORKER_SID, 'Reservations', '**'], method: 'POST' }),
  ];


  eventBridgePolicies.concat(workspacePolicies).forEach(function (policy) {
    capability.addPolicy(policy);
  });


  const token = capability.toJwt();

  // Include identity and token in a JSON response
  response.setBody({
    'token': capability.toJwt()
  });

  callback(null, response);
};



Agent Client Token
Generates a compatible token to connect as a WebRTC Client.



exports.handler = function(context, event, callback) {

  let response = new Twilio.Response();

  // Add CORS Headers
  let headers = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "GET",
    "Content-Type": "application/json"
  };

  // Set headers in response
  response.setHeaders(headers);

  response.setStatusCode(200);

  let ClientCapability = require('twilio').jwt.ClientCapability;

  const identity = 'TheAgent'
  const capability = new ClientCapability({
    accountSid: context.ACCOUNT_SID,
    authToken: context.AUTH_TOKEN,
  });

  capability.addScope(new ClientCapability.IncomingClientScope(identity));

  // Include identity and token in a JSON response
  response.setBody({
    'identity': identity,
    'token': capability.toJwt()
  });

  callback(null, response);
};

Simple CC Event Handler
Handles Events from TaskRouter.

/**
 *  Processes Events from a Workflow
 */

exports.handler = function(context, event, callback) {
    var eventType = event.EventType;
    var taskAttributes = (event.TaskAttributes)? JSON.parse(event.TaskAttributes) : {};
    var client = context.getTwilioClient();
    let util = require('util');
    let querystring = require('querystring');
    let got = require('got');

    console.log("Received Event: ", eventType);

    if ((eventType == 'task.canceled' ) || (eventType == 'workflow.timeout')) {
      console.log("Missed Call from:", taskAttributes.from);
      query = querystring.stringify({
        Message: 'Sorry, All agents are busy. Please leave a message. We\'ll call you as soon as possible',
        Email: context.MISSED_CALL_EMAIL}),
        voicemailUrl = util.format("http://twimlets.com/voicemail?%s", query);
        client.calls(taskAttributes.call_sid).update({
        method: 'POST',
        url: voicemailUrl
      }).then(call => {
          console.log("Updated Call: ", call);
          callback(null, 'OK');
      }).catch(err => {
          console.log("Error: ", err);
          // Error is because call doesn't exist (i.e Hungup) send an email instead
          const requestBody = {
            personalizations: [{ to: [{ email: context.MISSED_CALL_EMAIL }] }],
            from: { email: context.MISSED_CALL_EMAIL },
            subject: `Missed Call from: ${taskAttributes.from}`,
            content: [
                  {
                    type: 'text/plain',
                    value: `Missed Call from: ${taskAttributes.from}. Please call back`
                  }
                ]
              };
            console.log("Emailing");
            got.post('https://api.sendgrid.com/v3/mail/send', {
                  headers: {
                    Authorization: `Bearer ${context.SENDGRID_API_KEY}`,
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(requestBody)
            })
            .then(response => {
                console.log("Email Sent");
                callback(null, 'OK');
            })
            .catch(err => {
              console.log("Error: ", err);
              callback(err);
            });
      });

    } else {
        callback(null, 'OK');
    }
};
